//
// Copyright 2019 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// stylelint-disable selector-class-pattern --
// Selector '.mdc-*' should only be used in this project.

@use '@smui/theme/theme';
@use '@smui/rtl/rtl';
@use '@smui/feature-targeting/feature-targeting';
@use '@smui/typography/typography';

// Public mixins

@mixin character-counter-core-styles($query: feature-targeting.all()) {
  $feat-structure: feature-targeting.create-target($query, structure);

  // postcss-bem-linter: define text-field-character-counter

  .mdc-text-field-character-counter {
    @include typography.typography(caption, $query: $query);
    @include typography.text-baseline($top: 16px, $query: $query);

    @include feature-targeting.targets($feat-structure) {
      // Keep flex item align to trailing side on absence of helper text.
      @include rtl.reflexive-box(margin, left, auto);
      @include rtl.reflexive-box(padding, left, 16px);

      white-space: nowrap;
    }
  }

  // postcss-bem-linter: end
}

///
/// Customizes the color of the character counter associated with an enabled text field.
/// @param {Color} $color - The desired character counter color.
///
@mixin character-counter-color($color, $query: feature-targeting.all()) {
  &:not(.mdc-text-field--disabled) {
    @include character-counter-color_($color, $query);
  }
}

///
/// Customizes the color of the character counter associated with a disabled text field.
/// @param {Color} $color - The desired character counter color.
///
@mixin disabled-character-counter-color(
  $color,
  $query: feature-targeting.all()
) {
  &.mdc-text-field--disabled {
    @include character-counter-color_($color, $query);
  }
}

@mixin character-counter-position(
  $xOffset,
  $yOffset,
  $query: feature-targeting.all()
) {
  $feat-structure: feature-targeting.create-target($query, structure);

  .mdc-text-field-character-counter {
    @include feature-targeting.targets($feat-structure) {
      @include rtl.reflexive-position(right, $xOffset);
      position: absolute;
      bottom: $yOffset;
    }
  }
}

// Private mixins

@mixin character-counter-color_($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  // Character counter is placed inside mdc-textfield element (for textarea variant) or
  // inside helper line which is sibling to mdc-textfield.
  .mdc-text-field-character-counter,
  + .mdc-text-field-helper-line .mdc-text-field-character-counter {
    @include feature-targeting.targets($feat-color) {
      @include theme.property(color, $color);
    }
  }
}
