//
// Copyright 2020 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// stylelint-disable selector-class-pattern --
// NOTE: We disable `selector-class-pattern` above to allow using `mdc-` class
// selectors.

@use 'sass:list';
@use '@smui/animation/functions';
@use '@smui/dom/mixins' as dom;
@use '@smui/feature-targeting/feature-targeting';
@use '@smui/icon-button/styles/icon-button-theme';
@use '@smui/rtl/rtl';
@use './data-table-theme';

/// Styles related to checkbox and sorting for the header cell.
@mixin static-styles($query: feature-targeting.all()) {
  $feat-structure: feature-targeting.create-target($query, structure);
  $feat-animation: feature-targeting.create-target($query, animation);

  .mdc-data-table__header-cell--checkbox {
    @include feature-targeting.targets($feat-structure) {
      // Set to lowest width to adapt to cell content. Cell width should adapt
      // to row checkbox size when it is dense.
      // NOTE: `min-width` does not seem to work on table cells.
      width: 1px;
    }
  }

  .mdc-data-table__sort-icon-button {
    @include icon-button-theme.density(
      $density-scale: data-table-theme.$sort-icon-density-scale,
      $query: $query
    );

    @include feature-targeting.targets($feat-structure) {
      // Apply dummy `transform` to avoid pixel shift on sort down animation.
      @include rtl.ignore-next-line();
      transform: rotate(0.0001deg);
    }

    @include feature-targeting.targets($feat-structure) {
      @include rtl.reflexive-box(margin, left, 4px);
    }

    .mdc-data-table__header-cell--numeric & {
      @include feature-targeting.targets($feat-structure) {
        @include rtl.reflexive-box(margin, right, 4px);
      }
    }

    @include feature-targeting.targets($feat-animation) {
      transition: functions.standard(transform, $duration: 150ms);
    }

    .mdc-data-table__header-cell--sorted-descending & {
      @include feature-targeting.targets($feat-structure) {
        @include rtl.ignore-next-line();
        transform: rotate(-180deg);
      }
    }

    @include feature-targeting.targets($feat-structure) {
      opacity: 0;
    }

    &:focus,
    .mdc-data-table__header-cell:hover &,
    .mdc-data-table__header-cell--sorted & {
      @include feature-targeting.targets($feat-structure) {
        opacity: 1;
      }
    }
  }

  .mdc-data-table__header-cell--with-sort {
    @include feature-targeting.targets($feat-structure) {
      cursor: pointer;
    }
  }

  .mdc-data-table__sort-status-label {
    @include dom.visually-hidden($query: $query);
  }
}
