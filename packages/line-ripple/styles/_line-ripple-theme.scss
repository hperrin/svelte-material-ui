//
// Copyright 2023 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// stylelint-disable selector-class-pattern --
// Selector '.mdc-*' should only be used in this project.

@use '@smui/feature-targeting/feature-targeting';
@use '@smui/theme/theme';
@use './functions';

@mixin theme-styles($query: feature-targeting.all()) {
  $feat-structure: feature-targeting.create-target($query, structure);
  $feat-animation: feature-targeting.create-target($query, animation);

  // postcss-bem-linter: define line-ripple
  .mdc-line-ripple {
    @include feature-targeting.targets($feat-structure) {
      @include height(1px);
      @include active-height(2px);
    }

    @include feature-targeting.targets($feat-animation) {
      &::after {
        transition: functions.transition-value(transform),
          functions.transition-value(opacity);
      }
    }
  }
}

@mixin height($height) {
  &::before {
    @include theme.property(border-bottom-width, $height);
  }
}

@mixin active-height($height) {
  &::after {
    @include theme.property(border-bottom-width, $height);
  }
}

@mixin active-color($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include feature-targeting.targets($feat-color) {
    &::after {
      @include theme.property(border-bottom-color, $color);
    }
  }
}

@mixin inactive-color($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include feature-targeting.targets($feat-color) {
    &::before {
      @include theme.property(border-bottom-color, $color);
    }
  }
}
